uniform vec4 wavelengthsMicroMeters;
uniform vec4 ScatteringFactors;
uniform vec4 LightColor;
uniform vec4 AtmosphereFactors;

vec3 getSunDirection(vec3 cameraPosition) {

  vec3 rotationAxis = cameraPosition;
  rotationAxis.y = rotationAxis.x;
  rotationAxis.x = rotationAxis.z;
  rotationAxis.z = -rotationAxis.y;
  rotationAxis.y = 0.0;
  rotationAxis = normalize(rotationAxis);
  rotationAxis.y = 0.5;
  rotationAxis = normalize(rotationAxis);
  
  float sinA = -0.52268;
  float cosA = 0.85252;
  vec4 quat = vec4(
  rotationAxis.x * sinA,
  rotationAxis.y * sinA,
  rotationAxis.z * sinA,
  cosA
  );
  quat = normalize(quat);

  float xx = quat.x * quat.x;
  float xy = quat.x * quat.y;
  float xz = quat.x * quat.z;
  float xw = quat.x * quat.w;
  float yy = quat.y * quat.y;
  float yz = quat.y * quat.z;
  float yw = quat.y * quat.w;
  float zz = quat.z * quat.z;
  float zw = quat.z * quat.w;
  mat3 rotationMatrix = mat3(
  1.0 - 2.0 * ( yy + zz ),
  2.0 * ( xy - zw ),
  2.0 * ( xz + yw ),
  2.0 * ( xy + zw ),
  1.0 - 2.0 * ( xx + zz ),
  2.0 * ( yz - xw ),
  2.0 * ( xz - yw ),
  2.0 * ( yz + xw ),
  1.0 - 2.0 * ( xx + yy )
  );

  return normalize(cameraPosition * rotationMatrix);

}


uniform vec4 fogFactors;

attribute vec4 attr0;
attribute vec4 attr1;
attribute vec4 attr2;
attribute vec4 attr3;
attribute vec4 attr4;
varying vec4 texcoord;
varying vec4 texcoord1;
varying vec4 texcoord2;
varying vec4 texcoord3;
varying vec4 texcoord4;
varying vec4 texcoord5;
varying vec4 texcoord6;
varying vec4 texcoord7;
varying vec4 color;
varying vec4 color1;
uniform vec3 ssyf;
#ifdef PS
  uniform vec4 ssf[4];
  varying float ssv;
#endif
void main() {
  vec3 sun = getSunDirection(cameraPosition);  vec4 v0;
  vec4 v1;
  vec4 v2;
  vec4 v3;
  vec4 v4;
  vec4 r0;
  vec4 r1;
  vec4 r2;
  vec4 r3;
  vec4 r4;
  vec4 r5;
  vec4 r6;
  vec4 r7;
  vec4 r8;
  vec4 c4 = vec4(-0.0187292993, 0.0742610022, 1.57072878, 0.5);
  vec4 c5 = vec4(1, 0, 0.999499977, -0.212114394);
  vec4 c6 = vec4(0.159154937, 0.5, 6.28318548, -3.14159274);
  vec4 c7 = vec4(5.25, -6.80000019, 0.458999991, -0.00286999997);
  vec4 c8 = vec4(2, 12.566371, 4, 3.82999992);
  vec4 c9 = vec4(1.44269502, 0.00457890984, 0.25, 0);
  v0 = attr0;
  v1 = attr1;
  v2 = attr2;
  v3 = attr3;
  v4 = attr4;
  r0.x = dot(v3.xyz, modelMatrix[0].xyz);
  r0.y = dot(v3.xyz, modelMatrix[1].xyz);
  r0.z = dot(v3.xyz, modelMatrix[2].xyz);
  r1.xyz = normalize(r0.xyz);
  r0.xyz = normalize(sun.xyz);
  texcoord6.x = dot(r1.xyz, r0.xyz);
  r2.x = dot(v4.xyz, modelMatrix[0].xyz);
  r2.y = dot(v4.xyz, modelMatrix[1].xyz);
  r2.z = dot(v4.xyz, modelMatrix[2].xyz);
  r3.xyz = normalize(r2.xyz);
  texcoord6.y = dot(r3.xyz, r0.xyz);
  r2.x = dot(v2.xyz, modelMatrix[0].xyz);
  r2.y = dot(v2.xyz, modelMatrix[1].xyz);
  r2.z = dot(v2.xyz, modelMatrix[2].xyz);
  r4.xyz = normalize(r2.xyz);
  texcoord6.z = dot(r4.xyz, r0.xyz);
  r2 = v0.xyzx*c5.xxxy+c5.yyyx;
  r5.x = dot(r2, modelMatrix[0]);
  r5.y = dot(r2, modelMatrix[1]);
  r5.z = dot(r2, modelMatrix[2]);
  r2.xyz = (-r5.xyz)+cameraPosition.xyz;
  r5.xyz = normalize(r2.xyz);
  texcoord7.x = dot(r1.xyz, r5.xyz);
  texcoord2.xyz = r1.xyz;
  texcoord7.y = dot(r3.xyz, r5.xyz);
  texcoord7.z = dot(r4.xyz, r5.xyz);
  texcoord1.xyz = r4.xyz;
  texcoord3.xyz = r3.xyz;
  r1.x = modelMatrix[0].x;
  r1.y = modelMatrix[1].x;
  r1.z = modelMatrix[2].x;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = sqrt(abs(r0.w));
  r0.w = r0.w*c5.z;
  r1.x = r0.w*AtmosphereFactors.x+(-r0.w);
  r1.y = r1.x*v1.y+r0.w;
  r2.x = modelMatrix[0].w;
  r2.y = modelMatrix[1].w;
  r2.z = modelMatrix[2].w;
  r3.xyz = (-r2.xyz)+cameraPosition.xyz;
  r1.z = dot(r3.xyz, r3.xyz);
  r1.z = r1.z == 0.0?3.402823466e+38:inversesqrt(abs(r1.z));
  r1.w = r0.w*r1.z;
  r2.w = r1.w*c4.x+c4.y;
  r2.w = r2.w*r1.w+c5.w;
  r1.w = r2.w*r1.w+c4.z;
  r2.w = r0.w*(-r1.z)+c5.x;
  r0.w = r0.w*AtmosphereFactors.x;
  r0.w = r0.w*c8.x+(-r1.x);
  r0.w = r0.w*r1.x;
  r0.w = sqrt(abs(r0.w));
  r1.x = sqrt(abs(r2.w));
  r1.x = r1.x*r1.w;
  r1.x = r1.x*c6.x+c6.y;
  r1.x = fract(r1.x);
  r1.x = r1.x*c6.z+c6.w;
  r4.xy = vec2(cos(r1.x), sin(r1.x));
  r1.x = (-r4.x)+c5.x;
  r4.xzw = r1.zzz*r3.yzx;
  r1.z = 1.0/r1.z;
  r5.xyz = r4.wxz*r4.wxz;
  r5.xyz = r4.xzw*(-r4.zwx)+r5.xyz;
  r1.w = dot(r5.xyz, r5.xyz);
  r1.w = r1.w == 0.0?3.402823466e+38:inversesqrt(abs(r1.w));
  r5.xyz = r1.www*r5.xyz;
  r6.xyz = r1.xxx*r5.zzx;
  r6.xyz = r5.yxy*r6.xyz;
  r7.xyz = (-r5.xyz)*r4.yyy+r6.xyz;
  r6.xyz = r5.yxz*r4.yyy+r6.yxz;
  r5.xyz = r5.zxy*r5.zxy+(-c5.xxx);
  r5.xyz = r1.xxx*r5.xyz+c5.xxx;
  r8.y = r7.y;
  r8.z = r6.y;
  r8.x = r5.x;
  r8.x = dot(r4.wxz, r8.xyz);
  r7.y = r6.z;
  r6.z = r7.z;
  r6.y = r5.y;
  r7.z = r5.z;
  r8.z = dot(r4.wxz, r7.xyz);
  r8.y = dot(r4.wxz, r6.xyz);
  r1.xyw = r1.yyy*r8.xyz;
  r2.w = c4.w+v1.x;
  r2.w = fract(r2.w);
  r2.w = r2.w*c6.z+c6.w;
  r5.xy = vec2(cos(r2.w), sin(r2.w));
  r2.w = (-r5.x)+c5.x;
  r5.xzw = r4.wwx*r2.www;
  r5.xzw = r4.zxz*r5.xzw;
  r6.xyz = (-r4.xzw)*r5.yyy+r5.xzw;
  r5.xyz = r4.zxw*r5.yyy+r5.zxw;
  r4.xyz = r4.wxz*r4.wxz+(-c5.xxx);
  r4.xyz = r2.www*r4.xyz+c5.xxx;
  r7.y = r6.y;
  r7.z = r5.y;
  r7.x = r4.x;
  r7.x = dot(r1.xyw, r7.xyz);
  r6.y = r5.z;
  r5.z = r6.z;
  r5.y = r4.y;
  r6.z = r4.z;
  r7.z = dot(r1.xyw, r6.xyz);
  r7.y = dot(r1.xyw, r5.xyz);
  r4.xyz = r2.xyz+r7.xyz;
  r4.w = c5.x;
  gl_Position = projectionMatrix * modelViewMatrix * r4;
  r1.x = c5.x+(-v1.y);
  r0.w = r0.w*r1.x;
  r5.xyz = r4.xyz+(-cameraPosition.xyz);
  r6.xyz = normalize(r5.xyz);
  r4.xyz = r0.www*r6.xyz+r4.xyz;
  r5.xyz = (-r4.xyz)+cameraPosition.xyz;
  r0.w = dot(r5.xyz, r5.xyz);
  r0.w = r0.w == 0.0?3.402823466e+38:inversesqrt(abs(r0.w));
  texcoord4.xyz = r0.www*r5.xyz;
  r5.xyz = (-r2.xyz)+r4.xyz;
  r0.w = dot(r5.xyz, r5.xyz);
  r0.w = r0.w == 0.0?3.402823466e+38:inversesqrt(abs(r0.w));
  r1.y = 1.0/r0.w;
  r1.w = r1.y*r1.y;
  r1.z = r1.z*r1.z+(-r1.w);
  r1.z = r1.z*c8.z;
  r5.xyz = r4.xyz+(-cameraPosition.xyz);
  texcoord5.xyz = r4.xyz;
  r1.w = dot(r5.xyz, r5.xyz);
  r1.w = r1.w == 0.0?3.402823466e+38:inversesqrt(abs(r1.w));
  r4.xyz = r1.www*r5.xyz;
  r1.w = 1.0/r1.w;
  r2.w = dot(r3.xyz, r4.xyz);
  r3.x = r2.w+r2.w;
  r1.z = r3.x*r3.x+(-r1.z);
  r1.z = max(r1.z, c5.y);
  r1.z = sqrt(abs(r1.z));
  r1.z = r2.w*(-c8.x)+(-r1.z);
  r1.w = r1.z*(-c4.w)+r1.w;
  r1.z = r1.z*c4.w;
  r3.xyz = r4.xyz*r1.zzz+cameraPosition.xyz;
  r1.x = r1.x*r1.w;
  r1.x = r1.x*c4.w;
  r5.xyz = r1.xxx*r4.xyz;
  r5.xyz = r5.xyz*c4.www+r3.xyz;
  r3.xyz = (-r2.xyz)+r3.xyz;
  r1.z = dot(r4.xyz, r3.xyz);
  r0.w = r1.z*(-r0.w)+c5.x;
  r3.xyz = r4.xyz*r1.xxx+r5.xyz;
  r5.xyz = (-r2.xyz)+r5.xyz;
  r2.xyz = (-r2.xyz)+r3.xyz;
  r1.z = dot(r4.xyz, r2.xyz);
  r1.w = dot(r4.xyz, r5.xyz);
  r2.w = dot(r2.xyz, r2.xyz);
  r2.x = dot(r0.xyz, r2.xyz);
  r0.x = dot(r0.xyz, r5.xyz);
  r0.y = dot(r5.xyz, r5.xyz);
  r0.y = r0.y == 0.0?3.402823466e+38:inversesqrt(abs(r0.y));
  r0.x = r0.x*(-r0.y)+c5.x;
  r0.z = r2.w == 0.0?3.402823466e+38:inversesqrt(abs(r2.w));
  r1.z = r1.z*(-r0.z)+c5.x;
  r2.y = r1.z*c7.x+c7.y;
  r2.y = r1.z*r2.y+c8.w;
  r2.y = r1.z*r2.y+c7.z;
  r1.z = r1.z*r2.y+c7.w;
  r1.z = r1.z*c9.x;
  r1.z = exp2(r1.z);
  r1.z = r1.z*c9.z;
  r2.x = r2.x*(-r0.z)+c5.x;
  r0.z = 1.0/r0.z;
  r2.y = r2.x*c7.x+c7.y;
  r2.y = r2.x*r2.y+c8.w;
  r2.y = r2.x*r2.y+c7.z;
  r2.x = r2.x*r2.y+c7.w;
  r2.x = r2.x*c9.x;
  r2.x = exp2(r2.x);
  r1.z = r2.x*c9.z+(-r1.z);
  r2.x = r0.w*c7.x+c7.y;
  r2.x = r0.w*r2.x+c8.w;
  r2.x = r0.w*r2.x+c7.z;
  r0.w = r0.w*r2.x+c7.w;
  r0.w = r0.w*c9.x;
  r0.w = exp2(r0.w);
  r2.x = 1.0/AtmosphereFactors.x;
  r0.z = r1.y*r2.x+(-r0.z);
  r2.y = r1.y*(-r2.x)+r1.y;
  r2.y = 1.0/r2.y;
  r2.z = r2.y*c8.z;
  r1.x = r1.x*r2.y;
  r0.z = r0.z*r2.z;
  r0.zw = r0.zw*c9.xy;
  r0.z = exp2(r0.z);
  r1.z = r0.z*r1.z+r0.w;
  r0.z = r1.x*r0.z;
  r2.y = c8.y;
  r2.yw = r2.yy*ScatteringFactors.xy;
  r3.xyz = wavelengthsMicroMeters.zyx*wavelengthsMicroMeters.zyx;
  r3.xyz = r3.xyz*r3.xyz;
  r4.x = 1.0/r3.x;
  r4.y = 1.0/r3.y;
  r4.z = 1.0/r3.z;
  r3.xyz = r4.xyz*r2.yyy+r2.www;
  r5.xyz = (-r1.zzz)*r3.xyz;
  r5.xyz = r5.xyz*c9.xxx;
  r6.x = exp2(r5.x);
  r6.y = exp2(r5.y);
  r6.z = exp2(r5.z);
  r5.xyz = r0.zzz*r6.xyz;
  r0.z = r0.x*c7.x+c7.y;
  r0.z = r0.x*r0.z+c8.w;
  r0.z = r0.x*r0.z+c7.z;
  r0.x = r0.x*r0.z+c7.w;
  r0.x = r0.x*c9.x;
  r0.x = exp2(r0.x);
  r0.z = r1.w*(-r0.y)+c5.x;
  r0.y = 1.0/r0.y;
  r0.y = r1.y*r2.x+(-r0.y);
  r0.y = r0.y*r2.z;
  r0.y = r0.y*c9.x;
  r0.y = exp2(r0.y);
  r1.y = r0.z*c7.x+c7.y;
  r1.y = r0.z*r1.y+c8.w;
  r1.y = r0.z*r1.y+c7.z;
  r0.z = r0.z*r1.y+c7.w;
  r0.z = r0.z*c9.x;
  r0.z = exp2(r0.z);
  r0.z = r0.z*c9.z;
  r0.x = r0.x*c9.z+(-r0.z);
  r0.x = r0.y*r0.x+r0.w;
  r0.y = r1.x*r0.y;
  r0.xzw = r3.xyz*(-r0.xxx);
  r0.xzw = r0.xzw*c9.xxx;
  r1.x = exp2(r0.x);
  r1.y = exp2(r0.z);
  r1.z = exp2(r0.w);
  r0.xyz = r1.xyz*r0.yyy+r5.xyz;
  r1.xy = ScatteringFactors.zz*ScatteringFactors.xy;
  r1.xzw = r1.xxx*r4.xyz;
  r2.xyz = r0.xyz*r1.yyy;
  r0.xyz = r0.xyz*r1.xzw;
  r0.xyz = r0.xyz*AtmosphereFactors.yyy;
  color.xyz = r0.xyz*LightColor.xyz;
  r0.xyz = r2.xyz*AtmosphereFactors.yyy;
  color1.xyz = r0.xyz*LightColor.xyz;
  texcoord = c5.xxyy*v1.xyxx;
  texcoord4.w = c5.y;
  texcoord6.w = c5.y;
  texcoord7.w = c5.y;
  #ifdef PS
    ssv = dot(ssf[0], gl_Position);
  #endif
}
